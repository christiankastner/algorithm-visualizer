{"version":3,"sources":["constants/Sorting.js","constants/sketch.js","App.js","serviceWorker.js","index.js","assets/puppy.jpg"],"names":["shuffle","array","t","i","n","length","Math","random","merge","a0","a1","left","right","end","i0","i1","index","quickSort","a","start","sleep","partition","Promise","all","pivotIndex","pivotValue","swap","j","temp","time","resolve","setTimeout","sketch","p","selA","selB","img","arrayB","blockWidth","blockHeight","arrayA","m","path","puppy","swapPixels","pixelArray","preload","loadImage","setup","resize","width","height","createCanvas","background","textAlign","CENTER","createSelect","option","selected","changed","selectChange","draw","sort","image","selector","elt","value","iterator","measure","min","selectionSort","compare","b","bubbleSort","console","log","Array","mergeSort","clear","grabValue","object","newBlock","get","push","App","props","myRef","React","createRef","this","p5","current","className","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.959638d4.chunk.js","sourcesContent":["\nexport const bubbleSort = (array, iterator, measure = (a,b) => a < b) => {\n    for (let j = 0; j < array.length - iterator - 1; j++) {\n        if (measure(array[j + 1], array[j])) {\n            let t = array[j];\n            array[j] = array[j + 1];\n            array[j + 1] = t;\n        }\n    }\n}\n\nexport const shuffle = (array) => {\n    let n = array.length, t, i;\n    while (n) {\n        i = Math.random() * n-- | 0; // 0 â‰¤ i < n\n        t = array[n];\n        array[n] = array[i];\n        array[i] = t;\n    }\n  return array;\n}\n\nexport const mergeSort = (array, m)  => {\n    if (m < array.length) {\n        var n = array.length, a1 = new Array(n);\n          for (var i = 0; i < n; i += m << 1) {\n            var left = i,\n                right = Math.min(i + m, n),\n                end = Math.min(i + (m << 1), n);\n                merge(array, a1, left, right, end);\n          }\n        for (let i = 0; i < n; i++) {\n            array[i] = a1[i]\n        }\n    }\n  }\n  \nconst merge = (a0, a1, left, right, end) => {\n    for (var i0 = left, i1 = right; left < end; ++left) {\n      if (i0 < right && (i1 >= end || a0[i0].index <= a0[i1].index)) {\n        a1[left] = a0[i0++];\n      } else {\n        a1[left] = a0[i1++];\n      }\n    }\n  }\n\nexport const quickSort = async (array, start = 0, end = array.length - 1) => {\n    await sleep(1)\n    if (start >= end) {\n        return\n    }\n    let index = partition(array, start, end)\n    await Promise.all([\n        quickSort(array, start, index - 1),\n        quickSort(array, index + 1, end)\n    ])\n}\n\nconst partition = (array, start, end) => {\n    let pivotIndex = start;\n    let pivotValue = array[end].index;\n    for (let i = start; i < end; i++) {\n        if (array[i].index < pivotValue) {\n            swap(array, i, pivotIndex)\n            pivotIndex++;\n        }\n    }\n    swap(array, pivotIndex, end)\n    return pivotIndex;\n}\n\nexport const swap = async (array, i, j) => {\n    let temp = array[i]\n    array[i] = array[j]\n    array[j] = temp\n}\n\nconst sleep = (time) => new Promise(resolve => setTimeout(resolve, time))\n\nexport const selectionSort = (array, iterator, measure) => {\n    let min = iterator;\n    for (let i = iterator + 1; i < array.length; i++) {\n        if (measure(array[i], array[min])) min = i\n    }\n    let t = array[min];\n    array[min] = array[iterator];\n    array[iterator] = t;\n}","import puppy from \"../assets/puppy.jpg\"\nimport { selectionSort, bubbleSort, mergeSort, quickSort , shuffle, swap } from \"./Sorting\"\n\nconst sketch = (p) => {\n    let selA, selB, img, arrayA = [], arrayB, m = 1, amountX = 20, amountY = 20;\n    let i = 0;\n    let blockWidth, blockHeight;\n    const path = puppy\n\n    p.swapPixels = (pixelArray,i,j) => {\n        swap(pixelArray[i], pixelArray[j])\n        swap(pixelArray[i + 1], pixelArray[j + 1])\n        swap(pixelArray[i + 1], pixelArray[j + 1])\n    } \n\n    p.preload = () => {\n        img = p.loadImage(path)\n    }\n\n    p.setup = () => {\n        img.resize(img.width / 2, img.height/2)\n        img.resize(img.width - img.width % amountX, img.height - img.height % amountY)\n        blockWidth = img.width / amountX\n        blockHeight = img.height / amountY\n        p.createCanvas(img.width,img.height * 2);\n        arrayA = p.partition(img);\n        arrayB = [...arrayA]\n        p.background(255);\n        p.start()\n        p.textAlign(p.CENTER);\n        selA = p.createSelect();\n        selB = p.createSelect();\n        selA.option('Selection Sort');\n        selA.option('Bubble Sort');\n        selA.option('Quick Sort');\n        selA.option('Merge Sort');\n        selA.selected('Selection Sort');\n        selA.changed(p.selectChange)\n        selB.option('Selection Sort');\n        selB.option('Bubble Sort');\n        selB.option('Quick Sort');\n        selB.option('Merge Sort');\n        selB.selected('Bubble Sort');\n        selB.changed(p.selectChange)\n    } \n\n    p.draw = () => {\n        p.sort(selA)(arrayA, i, m)\n        p.sort(selB)(arrayB, i, m)\n        i++\n        if (m < arrayA.length) {\n            m <<= 1;\n        }\n        for (let i = 0; i < amountX; i++) {\n            for (let j = 0; j < amountY; j++) {\n                p.image(arrayA[i + j * amountX].img, i * blockWidth, j * blockHeight)\n                p.image(arrayB[i + j * amountX].img, i * blockWidth, j * blockHeight + img.height)\n            }\n        }\n    }\n\n    p.sort = (selector) => {\n        return (a, i, m) => {\n            switch (selector.elt.value) {\n                case 'Selection Sort':\n                    selectionSort(a, i, p.compare)\n                    break;\n                case 'Bubble Sort':\n                    bubbleSort(a, i, p.compare)\n                    break;\n                case 'Merge Sort':\n                    console.log(selector)\n                    mergeSort(a, m)\n                    break;\n                case 'Quick Sort':\n                    quickSort(a)\n                    break;\n                default:\n                    break;\n            }\n        \n        }\n    }\n\n    p.selectChange = () => {\n        i = 0;\n        m = 1; \n        console.log(m)\n        p.clear()\n        p.start()\n    }\n\n    p.start = () => {\n        shuffle(arrayA)\n        shuffle(arrayB)\n    }\n\n    p.grabValue = (object) => {\n        return object.index\n    }\n\n    p.compare = (a,b) => {\n        return a.index <= b.index\n    }\n\n    p.partition = (img) => {\n        let array = []\n        let newBlock\n        for (let j = 0; j < amountY; j++) {\n            for (let i = 0; i < amountX; i++) {\n                newBlock = img.get(i * blockWidth, j * blockHeight, blockWidth, blockHeight)\n                array.push({img: newBlock, index: i + j * amountX})\n            }\n        }\n        return array\n    }\n}\n\nexport default sketch","import React from 'react';\nimport p5 from 'p5';\nimport sketch from './constants/sketch';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    this.sketch = new p5(sketch, this.myRef.current)\n  }\n\n  render() {\n    return (\n      <div className=\"App\" ref={this.myRef}>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/puppy.7170c82a.jpg\";"],"sourceRoot":""}